[3/27, 2:02 PM] Arjun üó£Ô∏è: #include <stdio.h>
#include <stdlib.h>
// Define the Node structure
struct Node {
int data;
struct Node* next;
};
// Function to create a new node
struct Node* createNode(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
newNode->next = NULL;
return newNode;
}
// Function to insert a new element at the beginning
void insertAtFirst(struct Node** head, int data) {
struct Node* newNode = createNode(data);
newNode->next = *head;
*head = newNode;
}
// Function to insert a new element at the end
void insertAtEnd(struct Node** head, int data) {
struct Node* newNode = createNode(data);
if (*head == NULL) {
*head = newNode;
return;
}
struct Node* temp = *head;
while (temp->next != NULL) {
temp = temp->next;
}
temp->next = newNode;
}
// Function to insert a new element at a specific position
void insertAtPosition(struct Node** head, int data, int position) {
struct Node* newNode = createNode(data);
if (position == 0) {
insertAtFirst(head, data);
return;
}
[3/27, 2:03 PM] Arjun üó£Ô∏è: struct Node* temp = *head;
for (int i = 0; temp != NULL && i < position - 1; i++) {
temp = temp->next;
}
if (temp == NULL) {
printf("Position out of range\n");
free(newNode);
return;
}
newNode->next = temp->next;
temp->next = newNode;
}
// Function to delete the first node
void deleteFromFirst(struct Node** head) {
if (*head == NULL) {
printf("List is empty\n");
return;
}
struct Node* temp = *head;
*head = temp->next;
free(temp);
}
// Function to delete the last node
void deleteFromEnd(struct Node** head) {
if (*head == NULL) {
printf("List is empty\n");
return;
}
struct Node* temp = *head;
if (temp->next == NULL) {
free(temp);
*head = NULL;
return;
}
while (temp->next->next != NULL) {
temp = temp->next;
}
free(temp->next);
temp->next = NULL;
}
// Function to delete a node at a specific position
void deleteAtPosition(struct Node** head, int position) {
if (*head == NULL) {
printf("List is empty\n");
return;
[3/27, 2:03 PM] Arjun üó£Ô∏è: }
struct Node* temp = *head;
if (position == 0) {
deleteFromFirst(head);
return;
}
for (int i = 0; temp != NULL && i < position - 1; i++) {
temp = temp->next;
}
if (temp == NULL || temp->next == NULL) {
printf("Position out of range\n");
return;
}
struct Node* next = temp->next->next;
free(temp->next);
temp->next = next;
}
// Function to print the Linked List
void printList(struct Node* head) {
struct Node* temp = head;
if (temp == NULL) {
printf("List is empty\n");
return;
}
printf("Linked List: ");
while (temp != NULL) {
printf("%d -> ", temp->data);
temp = temp->next;
}
printf("NULL\n");
}
// Main function
int main() {
struct Node* head = NULL;
int choice, data, position;
while (1) {
printf("\nChoose an operation:\n");
printf("1. Insert at beginning\n");
printf("2. Insert at end\n");
printf("3. Insert at specific position\n");
printf("4. Delete from beginning\n");
printf("5. Delete from end\n");
printf("6. Delete from specific position\n");
printf("7. Display list\n");
printf("8. Exit\n");
[3/27, 2:03 PM] Arjun üó£Ô∏è: printf("Enter your choice: ");
scanf("%d", &choice);
switch (choice) {
case 1:
printf("Enter the data to insert at the beginning: ");
scanf("%d", &data);
insertAtFirst(&head, data);
printList(head);
break;
case 2:
printf("Enter the data to insert at the end: ");
scanf("%d", &data);
insertAtEnd(&head, data);
printList(head);
break;
case 3:
printf("Enter the data to insert: ");
scanf("%d", &data);
printf("Enter the position to insert at (starting from 0): ");
scanf("%d", &position);
insertAtPosition(&head, data, position);
printList(head);
break;
case 4:
deleteFromFirst(&head);
printList(head);
break;
case 5:
deleteFromEnd(&head);
printList(head);
break;
case 6:
printf("Enter the position to delete (starting from 0): ");
scanf("%d", &position);
deleteAtPosition(&head, position);
printList(head);
break;
case 7:
printList(head);
break;
case 8:
printf("Exiting program...\n");
exit(0);
default:
printf("Invalid choice, please try again.\n");
}
}
